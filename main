#include "GameConstants.h"
#include "cD3DManager.h"
#include "cD3DXSpriteMgr.h"
#include "cD3DXTexture.h"
#include "cSprite.h"
#include "cD3DXFont.h"

using namespace std;

HINSTANCE hInst;
HWND wndHandle;

static cD3DManager* d3dMgr = cD3DManager::getInstance();
static cD3DXSpriteMgr* d3dxSRMgr = cD3DXSpriteMgr::getInstance();

//playScene
D3DXVECTOR2 playerTrans = D3DXVECTOR2(50, 0);
D3DXVECTOR2 playerTrans2 = D3DXVECTOR2(0, 0);

D3DXVECTOR2 mobTrans = D3DXVECTOR2(300,300);
D3DXVECTOR2 mobTrans2 = D3DXVECTOR2(300,300);

//battleScene
D3DXVECTOR2 characterTrans = D3DXVECTOR2(100,300);
D3DXVECTOR2 characterTrans2 = D3DXVECTOR2(0,0);

D3DXVECTOR2 enemyTrans = D3DXVECTOR2(300,300);
D3DXVECTOR2 enemyTrans2 = D3DXVECTOR2(0,0);

string playerMove;
char pointText[50];

bool mainSence = true;
int meanuChoose = 1;

bool playSence = false;
float playerSpeed = 10.0f;
float point = 0.0f;
int enemyNumber = 0;
int nowEnemy = 0;
bool enemyOne = true;
bool leftWall = false;
bool rightWall = false;
bool upWall = false;
bool downWall = false;

bool battleSence = false;
bool battleStart = false;

int characterHealth = 100;
int characterAttack = 2;
float characterSpeed = 8.0f;
float characterKnockback = 10.0f;

int enemyHealth = 0;
int enemyAttack = 1;
float enemySpeed = 4.0f;
float enemyKnockback = 10.0f;

int normalHealth = 10; 
float normalSpeed = 5.0;

bool endSence = false;

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	switch(message)
	{
		case WM_KEYDOWN :
		{
			if(mainSence == true)
			{
				if(wParam == 0x57 && meanuChoose > 1)
				{
					meanuChoose -= 1;
					return 0;
				}
				if(wParam == 0x53 && meanuChoose < 2)
				{
					meanuChoose += 1;
					return 0;
				}
				if(wParam == VK_SPACE)
				{
					if(meanuChoose == 1)
					{
						mainSence = false;
						playSence = true;
						return 0;
					}
					if(meanuChoose == 2)
					{
						exit(1);
						return 0;
					}
				}
				if(endSence)
				{
					if(wParam == VK_SPACE)
					{
						exit(1);
						return 0;
					}
				}
			}

			if(playSence == true)
			{
				if(wParam == 0x57 && upWall == false)
				{
					playerMove = "up";
					return 0;
				}
				if(wParam == 0x53 && downWall == false)
				{
					playerMove = "down";
					return 0;
				}
				if(wParam == 0x41 && leftWall == false)
				{
					playerMove = "left";
					return 0;
				}
				if(wParam == 0x44 && rightWall == false)
				{
					playerMove = "right";
					return 0;
				}
			}

			if(battleSence == true)
			{
				if(wParam == VK_SPACE)
				{
					battleStart = true;
				}
			}
			return 0;
		}

		//MAKE SURE THE GAME CLOSE NORMALLY
		case WM_CLOSE:
		{
			PostQuitMessage(0);
			return 0;
		}

		case WM_DESTROY:
		{
			PostQuitMessage(0);
			return 0;
		}
	}
	return DefWindowProc(hWnd, message, wParam, lParam);
}

bool initWindow( HINSTANCE hInstance )
{
	WNDCLASSEX wcex;
	//CREATING THE SETTING FOR THE WINDOW FOR THE GAME
	wcex.cbSize = sizeof(WNDCLASSEX);
	//*check more style
	wcex.style = CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc = (WNDPROC)WndProc;
	wcex.cbClsExtra = 0;
	wcex.cbWndExtra = 0;
	wcex.hInstance = hInstance;
	//logo
	wcex.hIcon = LoadIcon(hInstance,"logo.ico");
	//mouse cursor
	wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
	//background color
	wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW+1);
	wcex.lpszMenuName = NULL;
	//name
	wcex.lpszClassName = "village";
	//logo - window bar
	wcex.hIconSm = LoadIcon(hInstance,"logo.ico");

	RegisterClassEx(&wcex);

	//CREATE THE WINDOW
	wndHandle = CreateWindow("village","town",WS_OVERLAPPEDWINDOW,CW_USEDEFAULT,CW_USEDEFAULT,800,600,NULL,NULL,hInstance,NULL);

	if(!wndHandle)
		return false;

	ShowWindow(wndHandle, SW_SHOW);
	UpdateWindow(wndHandle);
	return true;
}

int WINAPI WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, int nCmdShow )
{	
	if ( !initWindow( hInstance ) )
		return false;
	if ( !d3dMgr->initD3DManager(wndHandle) )
		return false;
	if ( !d3dxSRMgr->initD3DXSpriteMgr(d3dMgr->getTheD3DDevice()))
		return false;

	__int64 freq = 0;				
	QueryPerformanceFrequency((LARGE_INTEGER*)&freq);
	float sPC = 1.0f / (float)freq;			

	__int64 currentTime = 0;				
	__int64 previousTime = 0;				

	float numFrames   = 0.0f;				
	float timeElapsed = 0.0f;				

	float fpsRate = 1.0f/25.0f;

	LPDIRECT3DSURFACE9 aSurface;		
	LPDIRECT3DSURFACE9 abackGround;
	LPDIRECT3DSURFACE9 abattelLand;
	LPDIRECT3DSURFACE9 theBackbuffer = NULL;

	//mainSence Pos
	D3DXVECTOR3 startButtonPos = D3DXVECTOR3(303,264,0);
	D3DXVECTOR3 endButtonPos = D3DXVECTOR3(303,364,0);

	//playSence Pos
	D3DXVECTOR3 playerPos = D3DXVECTOR3(playerTrans.x,playerTrans.y,0);
	D3DXVECTOR3 mobPos = D3DXVECTOR3(mobTrans.x,mobTrans.y,0);

	//battleSence Pos
	D3DXVECTOR3 characterPos = D3DXVECTOR3(characterTrans.x,characterTrans.y,0);
	D3DXVECTOR3 enemyPos = D3DXVECTOR3(enemyTrans.x,enemyTrans.y,0);

	//mainSence draw
	cSprite theStartActive(startButtonPos,d3dMgr->getTheD3DDevice(),"Images\\startActive.png");
	cSprite theStartUnactive(startButtonPos,d3dMgr->getTheD3DDevice(),"Images\\startUnactive.png");
	cSprite theEndActive(endButtonPos,d3dMgr->getTheD3DDevice(),"Images\\endActive.png");
	cSprite theEndUnActive(endButtonPos,d3dMgr->getTheD3DDevice(),"Images\\endUnActive.png");

	//playSence draw
	cSprite thePlayer(playerPos,d3dMgr->getTheD3DDevice(),"Images\\playerSprite.png");
	cSprite theMob(mobPos,d3dMgr->getTheD3DDevice(),"Images\\Mob - 64x64.png");

	//battleSence draw
	cSprite theCharacter(characterPos,d3dMgr->getTheD3DDevice(),"Images\\playerSprite.png");
	cSprite theEnemy(enemyPos,d3dMgr->getTheD3DDevice(),"Images\\Mob - 32x32.png");
	
	MSG msg;
	ZeroMemory( &msg, sizeof( msg ));

	//background
	aSurface = d3dMgr ->getD3DSurfaceFromFile("Images\\mainBackground.png");
	abackGround = d3dMgr ->getD3DSurfaceFromFile("Images\\grass.png");
	abattelLand = d3dMgr ->getD3DSurfaceFromFile("Images\\skyLand.png");
	
	//Font
	cD3DXFont*textFont = new cD3DXFont(d3dMgr->getTheD3DDevice(),hInstance,"Cinegbin");

	//BattleSence messagePos
	RECT timePos;
	SetRect(&timePos, 300 , 10, 500, 100);

	//BattelSence message
	sprintf_s( pointText, 15, "Time:", playerSpeed);

	QueryPerformanceCounter((LARGE_INTEGER*)&previousTime);

	while( msg.message!=WM_QUIT )
	{
		// Check the message queue
		if (PeekMessage(&msg, NULL, 0U, 0U, PM_REMOVE) )
		{
			TranslateMessage( &msg );
			DispatchMessage( &msg );
		}
		else
		{
			QueryPerformanceCounter((LARGE_INTEGER*)&currentTime);
			float dt = (currentTime - previousTime)*sPC;

			timeElapsed += dt;

			if(timeElapsed > fpsRate)
			{
				sprintf_s( pointText, 50, "Point: %d", point);

				//playSecne resetTran
				playerPos = D3DXVECTOR3(playerTrans.x,playerTrans.y,0);

				//battleSence resetTran
				characterPos = D3DXVECTOR3(characterTrans.x,characterTrans.y,0);
				enemyPos = D3DXVECTOR3(enemyTrans.x,enemyTrans.y,0);

				//playSecne resetPos
				thePlayer.setSpritePos(playerPos);

				//battleSecne resetPos
				theCharacter.setSpritePos(characterPos);
				theEnemy.setSpritePos(enemyPos);

				//playSecne setTrans2
				playerTrans2.x = playerTrans.x + 50;
				playerTrans2.y = playerTrans.y + 65;

				mobTrans2.x = mobTrans.x + 64;
				mobTrans2.y = mobTrans.y + 64;

				//battleSecne setTrans2
				characterTrans2.x = characterTrans.x +50;
				characterTrans2.y = characterTrans.y + 65;

				enemyTrans2.x = enemyTrans.x +32;
				enemyTrans2.y = enemyTrans.y +32;

				//playerSence
				if(playSence == true)
				{
					//character moving
					if(playerMove == "up")
					{
						playerTrans.y -= playerSpeed;
						playerMove = "null";
					}
					if(playerMove == "down")
					{
						playerTrans.y += playerSpeed;
						playerMove = "null";
					}
					if(playerMove == "left")
					{
						playerTrans.x -= playerSpeed;
						playerMove = "null";
					}
					if(playerMove == "right")
					{
						playerTrans.x += playerSpeed;
						playerMove = "null";
					}
					
					//collision

					//enemyOne
					if(enemyOne == true)
					{
					if(playerTrans2.x < mobTrans2.x && playerTrans2.x > mobTrans.x && playerTrans2.y < mobTrans2.y && playerTrans2.y > mobTrans.y)
					{
						if(playerTrans2.x > mobTrans.x)
						{
							nowEnemy = 1;
							enemyHealth = 10;
							playSence = false;
							battleSence = true;
							enemyOne = false;
						}
						if(playerTrans2.y > mobTrans.y)
						{
							nowEnemy = 1;
							enemyHealth = 10;
							playSence = false;
							battleSence = true;
							enemyOne = false;
						}
					}
					}
					if(enemyOne == true)
					{
					if(playerTrans.x < mobTrans2.x && playerTrans.x > mobTrans.x && playerTrans.y < mobTrans2.y && playerTrans.y > mobTrans.y)
					{
						if(playerTrans.x < mobTrans2.x)
						{
							nowEnemy = 1;
							enemyHealth = 10;
							playSence = false;
							battleSence = true;
							enemyOne = false;
						}
						if(playerTrans.y < mobTrans2.y)
						{							
							nowEnemy = 1;
							enemyHealth = 10;
							playSence = false;
							battleSence = true;
							enemyOne = false;
						}
					}
					}

					//set wall
					if(playerTrans.x < 5)
					{
						leftWall = true;
					}
					else
					{
						leftWall = false;
					}
					if(playerTrans2.x > 795)
					{
						rightWall = true;
					}
					else
					{
						rightWall = false;
					}
					if(playerTrans.y < 5)
					{
						upWall = true;
					}
					else
					{
						upWall = false;
					}
					if(playerTrans2.y > 595)
					{
						downWall = true;
					}
					else
					{
						downWall = false;
					}
				}
				//battelSecne
				if(battleSence == false)
				{
					characterTrans.x = 5;
					enemyTrans.x = 738;
				}
				if(battleSence == true)
				{
					if(nowEnemy = 1)
					{
						if(enemyHealth < 0)
						{
							point += 1;
							enemyOne = false;
							nowEnemy = 0;
						}
					}
					characterTrans.x += characterSpeed;
					enemyTrans.x -= enemySpeed;
					if(characterTrans2.x > enemyTrans.x)
					{
						characterHealth -= enemyAttack;
						enemyHealth -= characterAttack;
						characterTrans.x = characterTrans.x - (characterSpeed*2 + enemyKnockback);
						enemyTrans.x = enemyTrans.x + (enemySpeed*2 + characterKnockback);
					}
					if(enemyHealth < 0)
					{
						battleSence = false;
						playSence = true;
					}
					if(characterHealth < 0)
					{
						endSence = true;
						battleSence = false;
					}
				}
				d3dMgr->beginRender();
				theBackbuffer = d3dMgr->getTheBackBuffer();

				if(mainSence == true)
				{
					d3dMgr->updateTheSurface(aSurface, theBackbuffer);
				}
				if(playSence == true)
				{
					d3dMgr->updateTheSurface(abackGround, theBackbuffer);
				}
				if(battleSence == true)
				{
					d3dMgr->updateTheSurface(abattelLand, theBackbuffer);
				}
				if(endSence == true)
				{
					d3dMgr->updateTheSurface(aSurface, theBackbuffer);
				}

				d3dMgr->releaseTheBackbuffer(theBackbuffer);
				d3dxSRMgr->beginDraw();

				//draw mainSence
				if(mainSence == true)
				{
					if(meanuChoose == 1)
					{
						d3dxSRMgr->drawSprite(theStartActive.getTexture(),NULL,NULL,&theStartActive.getSpritePos(),0xFFFFFFFF);
						d3dxSRMgr->drawSprite(theEndUnActive.getTexture(),NULL,NULL,&theEndUnActive.getSpritePos(),0xFFFFFFFF);
					}
					if(meanuChoose == 2)
					{
						d3dxSRMgr->drawSprite(theStartUnactive.getTexture(),NULL,NULL,&theStartActive.getSpritePos(),0xFFFFFFFF);
						d3dxSRMgr->drawSprite(theEndActive.getTexture(),NULL,NULL,&theEndActive.getSpritePos(),0xFFFFFFFF);
					}
				}
				//draw playSence
				if(playSence == true)
				{
					if(enemyOne == true)
					{
						d3dxSRMgr->drawSprite(theMob.getTexture(),NULL,NULL,&theMob.getSpritePos(),0xFFFFFFFF);
					}
						d3dxSRMgr->drawSprite(thePlayer.getTexture(),NULL,NULL,&thePlayer.getSpritePos(),0xFFFFFFFF);
				}
				//draw battelSence
				if(battleSence == true)
				{
					d3dxSRMgr->drawSprite(theCharacter.getTexture(),NULL,NULL,&theCharacter.getSpritePos(),0xFFFFFFFF);
					d3dxSRMgr->drawSprite(theEnemy.getTexture(),NULL,NULL,&theEnemy.getSpritePos(),0xFFFFFFFF);
				}
				d3dxSRMgr->endDraw();
				textFont->printText(pointText, timePos);
				d3dMgr->endRender();
				timeElapsed = 0.0f;
			}
					
			previousTime = currentTime;
		}
	}
	d3dxSRMgr->cleanUp();
	d3dMgr->clean();
	return (int) msg.wParam;
}

